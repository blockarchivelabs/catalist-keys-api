/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/eth/v1/beacon/genesis': {
    /** Retrieve details of the chain's genesis which can be used to identify chain. */
    get: operations['getGenesis'];
  };
  '/eth/v1/beacon/states/{state_id}/root': {
    /** Calculates HashTreeRoot for state with given 'stateId'. If stateId is root, same value will be returned. */
    get: operations['getStateRoot'];
  };
  '/eth/v1/beacon/states/{state_id}/fork': {
    /** Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'. */
    get: operations['getStateFork'];
  };
  '/eth/v1/beacon/states/{state_id}/finality_checkpoints': {
    /**
     * Returns finality checkpoints for state with given 'stateId'.
     * In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.
     */
    get: operations['getStateFinalityCheckpoints'];
  };
  '/eth/v1/beacon/states/{state_id}/validators': {
    /**
     * Returns filterable list of validators with their balance, status and index.
     *
     * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
     * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
     * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
     * for which inputs a response has been returned.
     */
    get: operations['getStateValidators'];
  };
  '/eth/v1/beacon/states/{state_id}/validators/{validator_id}': {
    /** Returns validator specified by state and id or public key along with status and balance. */
    get: operations['getStateValidator'];
  };
  '/eth/v1/beacon/states/{state_id}/validator_balances': {
    /**
     * Returns filterable list of validators balances.
     *
     * Balances will be returned for all indices or public key that match known validators.  If an index or public key does not
     * match any known validator, no balance will be returned but this will not cause an error.  There are no guarantees for the
     * returned data in terms of ordering; the index and is returned for each balance, and can be used to confirm for which inputs a
     * response has been returned.
     */
    get: operations['getStateValidatorBalances'];
  };
  '/eth/v1/beacon/states/{state_id}/committees': {
    /** Retrieves the committees for the given state. */
    get: operations['getEpochCommittees'];
  };
  '/eth/v1/beacon/states/{state_id}/sync_committees': {
    /** Retrieves the sync committees for the given state. */
    get: operations['getEpochSyncCommittees'];
  };
  '/eth/v1/beacon/headers': {
    /** Retrieves block headers matching given query. By default it will fetch current head slot blocks. */
    get: operations['getBlockHeaders'];
  };
  '/eth/v1/beacon/headers/{block_id}': {
    /** Retrieves block header for given block id. */
    get: operations['getBlockHeader'];
  };
  '/eth/v1/beacon/blocks': {
    /**
     * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
     * to be included in the beacon chain. The beacon node is not required to validate the signed
     * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
     * successful. The beacon node is expected to integrate the new block into its state, and
     * therefore validate the block internally, however blocks which fail the validation are still
     * broadcast but a different status code is returned (202)
     */
    post: operations['publishBlock'];
  };
  '/eth/v1/beacon/blinded_blocks': {
    /**
     * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
     * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
     * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
     * to be included in the beacon chain. The beacon node is not required to validate the signed
     * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
     * successful. The beacon node is expected to integrate the new block into its state, and
     * therefore validate the block internally, however blocks which fail the validation are still
     * broadcast but a different status code is returned (202). Pre-Bellatrix, this endpoint will accept
     * a `SignedBeaconBlock`.
     */
    post: operations['publishBlindedBlock'];
  };
  '/eth/v1/beacon/blocks/{block_id}': {
    /**
     * Returns the complete `SignedBeaconBlock` for a given block ID.
     * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
     */
    get: operations['getBlock'];
  };
  '/eth/v2/beacon/blocks/{block_id}': {
    /**
     * Retrieves block details for given block id.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getBlockV2'];
  };
  '/eth/v1/beacon/blocks/{block_id}/root': {
    /** Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader */
    get: operations['getBlockRoot'];
  };
  '/eth/v1/beacon/blocks/{block_id}/attestations': {
    /** Retrieves attestation included in requested block. */
    get: operations['getBlockAttestations'];
  };
  '/eth/v1/beacon/pool/attestations': {
    /** Retrieves attestations known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttestations'];
    /**
     * Submits Attestation objects to the node.  Each attestation in the request body is processed individually.
     *
     * If an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.
     *
     * If one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.
     */
    post: operations['submitPoolAttestations'];
  };
  '/eth/v1/beacon/pool/attester_slashings': {
    /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttesterSlashings'];
    /** Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network. */
    post: operations['submitPoolAttesterSlashings'];
  };
  '/eth/v1/beacon/pool/proposer_slashings': {
    /** Retrieves proposer slashings known by the node but not necessarily incorporated into any block */
    get: operations['getPoolProposerSlashings'];
    /** Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network. */
    post: operations['submitPoolProposerSlashings'];
  };
  '/eth/v1/beacon/pool/sync_committees': {
    /**
     * Submits sync committee signature objects to the node.
     *
     * Sync committee signatures are not present in phase0, but are required for Altair networks.
     *
     * If a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.
     *
     * If one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.
     */
    post: operations['submitPoolSyncCommitteeSignatures'];
  };
  '/eth/v1/beacon/pool/voluntary_exits': {
    /** Retrieves voluntary exits known by the node but not necessarily incorporated into any block */
    get: operations['getPoolVoluntaryExits'];
    /** Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network. */
    post: operations['submitPoolVoluntaryExit'];
  };
  '/eth/v1/debug/beacon/states/{state_id}': {
    /**
     * Returns full BeaconState object for given stateId.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getState'];
  };
  '/eth/v2/debug/beacon/states/{state_id}': {
    /**
     * Returns full BeaconState object for given stateId.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getStateV2'];
  };
  '/eth/v1/debug/beacon/heads': {
    /** Retrieves all possible chain heads (leaves of fork choice tree). */
    get: operations['getDebugChainHeads'];
  };
  '/eth/v2/debug/beacon/heads': {
    /** Retrieves all possible chain heads (leaves of fork choice tree). */
    get: operations['getDebugChainHeadsV2'];
  };
  '/eth/v1/node/identity': {
    /** Retrieves data about the node's network presence */
    get: operations['getNetworkIdentity'];
  };
  '/eth/v1/node/peers': {
    /** Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions */
    get: operations['getPeers'];
  };
  '/eth/v1/node/peers/{peer_id}': {
    /** Retrieves data about the given peer */
    get: operations['getPeer'];
  };
  '/eth/v1/node/peer_count': {
    /** Retrieves number of known peers. */
    get: operations['getPeerCount'];
  };
  '/eth/v1/node/version': {
    /** Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field. */
    get: operations['getNodeVersion'];
  };
  '/eth/v1/node/syncing': {
    /** Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to. */
    get: operations['getSyncingStatus'];
  };
  '/eth/v1/node/health': {
    /** Returns node health status in http status codes. Useful for load balancers. */
    get: operations['getHealth'];
  };
  '/eth/v1/config/fork_schedule': {
    /** Retrieve all forks, past present and future, of which this node is aware. */
    get: operations['getForkSchedule'];
  };
  '/eth/v1/config/spec': {
    /**
     * Retrieve specification configuration used on this node.  The configuration should include:
     *   - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/beacon-chain.md#constants) values
     *   - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/altair.yaml) values
     *   - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml) values
     *
     * Values are returned with following format:
     *   - any value starting with 0x in the spec is returned as a hex string
     *   - numeric values are returned as a quoted integer
     */
    get: operations['getSpec'];
  };
  '/eth/v1/config/deposit_contract': {
    /** Retrieve Eth1 deposit contract address and chain ID. */
    get: operations['getDepositContract'];
  };
  '/eth/v1/validator/duties/attester/{epoch}': {
    /**
     * Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.
     * Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
     * - event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
     * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`
     * - event.block otherwise
     *
     * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.
     */
    post: operations['getAttesterDuties'];
  };
  '/eth/v1/validator/duties/proposer/{epoch}': {
    /**
     * Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.
     * Duties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
     * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
     * - event.block otherwise
     *
     * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.
     */
    get: operations['getProposerDuties'];
  };
  '/eth/v1/validator/duties/sync/{epoch}': {
    /** Requests the beacon node to provide a set of sync committee duties for a particular epoch. */
    post: operations['getSyncCommitteeDuties'];
  };
  '/eth/v1/validator/blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid block, which can then be signed by a validator.
     *
     * __NOTE__: Supports only phase0 blocks.
     */
    get: operations['produceBlock'];
  };
  '/eth/v2/validator/blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid block, which can then be signed by a validator.
     *
     * Metadata in the response indicates the type of block produced, and the supported types of block
     * will be added to as forks progress.
     */
    get: operations['produceBlockV2'];
  };
  '/eth/v1/validator/blinded_blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid blinded block, which can then be signed by a validator.
     * A blinded block is a block with only a transactions root, rather than a full transactions list.
     *
     * Metadata in the response indicates the type of block produced, and the supported types of block
     * will be added to as forks progress.
     *
     * Pre-Bellatrix, this endpoint will return a `BeaconBlock`.
     */
    get: operations['produceBlindedBlock'];
  };
  '/eth/v1/validator/attestation_data': {
    /** Requests that the beacon node produce an AttestationData. */
    get: operations['produceAttestationData'];
  };
  '/eth/v1/validator/aggregate_attestation': {
    /** Aggregates all attestations matching given attestation data root and slot */
    get: operations['getAggregatedAttestation'];
  };
  '/eth/v1/validator/aggregate_and_proofs': {
    /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
    post: operations['publishAggregateAndProofs'];
  };
  '/eth/v1/validator/beacon_committee_subscriptions': {
    /**
     * After beacon node receives this request,
     * search using discv5 for peers related to this subnet
     * and replace current peers with those ones if necessary
     * If validator `is_aggregator`, beacon node must:
     * - announce subnet topic subscription on gossipsub
     * - aggregate attestations received on that subnet
     */
    post: operations['prepareBeaconCommitteeSubnet'];
  };
  '/eth/v1/validator/sync_committee_subscriptions': {
    /**
     * Subscribe to a number of sync committee subnets
     *
     * Sync committees are not present in phase0, but are required for Altair networks.
     *
     * Subscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.
     */
    post: operations['prepareSyncCommitteeSubnets'];
  };
  '/eth/v1/validator/sync_committee_contribution': {
    /** Requests that the beacon node produce a sync committee contribution. */
    get: operations['produceSyncCommitteeContribution'];
  };
  '/eth/v1/validator/contribution_and_proofs': {
    /** Publish multiple signed sync committee contribution and proofs */
    post: operations['publishContributionAndProofs'];
  };
  '/eth/v1/validator/prepare_beacon_proposer': {
    /**
     * Prepares the beacon node for potential proposers by supplying information
     * required when proposing blocks for the given validators.  The information
     * supplied for each validator index will persist through the epoch in which
     * the call is submitted and for a further two epochs after that, or until the
     * beacon node restarts.  It is expected that validator clients will send this
     * information periodically, for example each epoch, to ensure beacon nodes have
     * correct and timely fee recipient information.
     *
     * Note that there is no guarantee that the beacon node will use the supplied fee
     * recipient when creating a block proposal, so on receipt of a proposed block the
     * validator should confirm that it finds the fee recipient within the block
     * acceptable before signing it.
     *
     * Also note that requests containing currently inactive or unknown validator
     * indices will be accepted, as they may become active at a later epoch.
     */
    post: operations['prepareBeaconProposer'];
  };
  '/eth/v1/validator/register_validator': {
    /**
     * Prepares the beacon node for engaging with external builders. The
     * information will be sent by the beacon node to the builder network. It is
     * expected that the validator client will send this information periodically
     * to ensure the beacon node has correct and timely registration information
     * to provide to builders. The validator client should not sign blinded beacon
     * blocks that do not adhere to their latest fee recipient and gas limit
     * preferences.
     *
     * Note that requests containing currently inactive or unknown validator
     * pubkeys will be accepted, as they may become active at a later epoch.
     */
    post: operations['registerValidator'];
  };
  '/eth/v1/events': {
    /**
     * Provides endpoint to subscribe to beacon node Server-Sent-Events stream.
     * Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)
     * implementation to listen on those events.
     *
     * Servers _may_ send SSE comments beginning with `:` for any purpose, including to keep the
     * event stream connection alive in the presence of proxy servers.
     */
    get: operations['eventstream'];
  };
}

export interface components {
  schemas: {
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
    BeaconState: {
      /** @example 1 */
      genesis_time?: string;
      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
      genesis_validators_root?: string;
      /** @example 1 */
      slot?: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork?: {
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version?: string;
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        current_version?: string;
        /** @example 1 */
        epoch?: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        body_root?: string & unknown;
      };
      block_roots?: string[];
      state_roots?: string[];
      historical_roots?: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      };
      eth1_data_votes?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      }[];
      /** @example 1 */
      eth1_deposit_index?: string;
      validators?: {
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey?: string;
        withdrawal_credentials?: string & unknown;
        effective_balance?: string & unknown;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed?: boolean;
        activation_eligibility_epoch?: string & unknown;
        activation_epoch?: string & unknown;
        exit_epoch?: string & unknown;
        withdrawable_epoch?: string & unknown;
      }[];
      /** @description Validator balances in gwei */
      balances?: string[];
      randao_mixes?: string[];
      /** @description Per-epoch sums of slashed effective balances */
      slashings?: string[];
      previous_epoch_attestations?: {
        /** @description Attester aggregation bits. */
        aggregation_bits?: string;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data?: {
          /** @example 1 */
          slot?: string;
          /** @example 1 */
          index?: string;
          beacon_block_root?: string & unknown;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          source?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          target?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
        };
        /** @example 1 */
        inclusion_delay?: string;
        /** @example 1 */
        proposer_index?: string;
      }[];
      current_epoch_attestations?: {
        /** @description Attester aggregation bits. */
        aggregation_bits?: string;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data?: {
          /** @example 1 */
          slot?: string;
          /** @example 1 */
          index?: string;
          beacon_block_root?: string & unknown;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          source?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          target?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
        };
        /** @example 1 */
        inclusion_delay?: string;
        /** @example 1 */
        proposer_index?: string;
      }[];
      /**
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits?: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
    BeaconBlock: {
      slot?: string & unknown;
      proposer_index?: string & unknown;
      parent_root?: string & unknown;
      state_root?: string & unknown;
    } & {
      /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
      body?: {
        randao_reveal?: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data?: {
          deposit_root?: string & unknown;
          deposit_count?: string & unknown;
          block_hash?: string & unknown;
        };
        graffiti?: string;
        proposer_slashings?: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
        }[];
        attester_slashings?: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        }[];
        attestations?: {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        }[];
        deposits?: {
          /** @description Branch in the deposit tree. */
          proof?: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data?: {
            /**
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey?: string;
            withdrawal_credentials?: string & unknown;
            amount?: string & unknown;
            signature?: string & unknown;
          };
        }[];
        voluntary_exits?: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message?: {
            epoch?: string & unknown;
            validator_index?: string & unknown;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
      };
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL spec. */
    SignedBeaconBlock: {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
      message?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
        body?: {
          randao_reveal?: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data?: {
            deposit_root?: string & unknown;
            deposit_count?: string & unknown;
            block_hash?: string & unknown;
          };
          graffiti?: string;
          proposer_slashings?: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
          }[];
          attester_slashings?: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          }[];
          attestations?: {
            /**
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits?: string;
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          }[];
          deposits?: {
            /** @description Branch in the deposit tree. */
            proof?: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              withdrawal_credentials?: string & unknown;
              amount?: string & unknown;
              signature?: string & unknown;
            };
          }[];
          voluntary_exits?: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message?: {
              epoch?: string & unknown;
              validator_index?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          }[];
        };
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
    SignedBeaconBlockHeader: {
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      message?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        body_root?: string & unknown;
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    ValidatorResponse: {
      index?: string & unknown;
      balance?: string & unknown;
      /**
       * @description Possible statuses:
       * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
       * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
       * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
       * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
       * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
       * - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
       * - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.
       * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
       * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
       *
       * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
       *
       * @example active_ongoing
       * @enum {undefined}
       */
      status?:
        | 'pending_initialized'
        | 'pending_queued'
        | 'active_ongoing'
        | 'active_exiting'
        | 'active_slashed'
        | 'exited_unslashed'
        | 'exited_slashed'
        | 'withdrawal_possible'
        | 'withdrawal_done';
      validator?: {
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey?: string;
        withdrawal_credentials?: string & unknown;
        effective_balance?: string & unknown;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed?: boolean;
        activation_eligibility_epoch?: string & unknown;
        activation_epoch?: string & unknown;
        exit_epoch?: string & unknown;
        withdrawable_epoch?: string & unknown;
      };
    };
    ValidatorBalanceResponse: {
      index?: string & unknown;
      balance?: string & unknown;
    };
    /**
     * @description Possible statuses:
     * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
     * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
     * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
     * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
     * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
     * - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
     * - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.
     * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
     * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
     *
     * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
     *
     * @example active_ongoing
     * @enum {undefined}
     */
    ValidatorStatus:
      | 'pending_initialized'
      | 'pending_queued'
      | 'active_ongoing'
      | 'active_exiting'
      | 'active_slashed'
      | 'exited_unslashed'
      | 'exited_slashed'
      | 'withdrawal_possible'
      | 'withdrawal_done';
    /** @description Group of validators assigned to attest at specific slot and that have the same committee index (shard in phase 1) */
    Committee: {
      index?: string & unknown;
      /** @example 1 */
      slot?: string;
      /** @description List of validator indices assigned to this committee */
      validators?: string[];
    };
    /** @description The [`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/core/0_beacon-chain.md#attesterslashing) object from the CL spec. */
    AttesterSlashing: {
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_1?: {
        /** @description Attesting validator indices */
        attesting_indices?: string[];
        signature?: string & unknown;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data?: {
          /** @example 1 */
          slot?: string;
          /** @example 1 */
          index?: string;
          beacon_block_root?: string & unknown;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          source?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          target?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
        };
      };
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_2?: {
        /** @description Attesting validator indices */
        attesting_indices?: string[];
        signature?: string & unknown;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data?: {
          /** @example 1 */
          slot?: string;
          /** @example 1 */
          index?: string;
          beacon_block_root?: string & unknown;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          source?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
          target?: {
            /** @example 1 */
            epoch?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            root?: string;
          };
        };
      };
    };
    /** @description The [`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#proposerslashing) object from the CL spec. */
    ProposerSlashing: {
      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
      signed_header_1?: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        message?: {
          slot?: string & unknown;
          proposer_index?: string & unknown;
          parent_root?: string & unknown;
          state_root?: string & unknown;
        } & {
          body_root?: string & unknown;
        };
        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
        signature?: string;
      };
      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
      signed_header_2?: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        message?: {
          slot?: string & unknown;
          proposer_index?: string & unknown;
          parent_root?: string & unknown;
          state_root?: string & unknown;
        } & {
          body_root?: string & unknown;
        };
        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
        signature?: string;
      };
    };
    /** @description The [`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the CL spec. */
    SignedVoluntaryExit: {
      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
      message?: {
        epoch?: string & unknown;
        validator_index?: string & unknown;
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    AttesterDuty: {
      /**
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey?: string;
      validator_index?: string & unknown;
      committee_index?: string & unknown;
      committee_length?: string & unknown;
      committees_at_slot?: string & unknown;
      validator_committee_index?: string & unknown;
      slot?: string & unknown;
    };
    ProposerDuty: {
      /**
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey?: string;
      validator_index?: string & unknown;
      slot?: string & unknown;
    };
    'Altair.SyncDuty': {
      /**
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey?: string;
      validator_index?: string & unknown;
      /** @description The indices of the validator in the sync committee. */
      validator_sync_committee_indices?: string[];
    };
    /** @description The [`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/validator.md#signedaggregateandproof) object */
    SignedAggregateAndProof: {
      message?: {
        /** @example 1 */
        aggregator_index?: string;
        /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
        aggregate?: {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        };
      } & {
        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
        selection_proof?: string;
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
    Attestation: {
      /**
       * @description Attester aggregation bits.
       * @example 0x01
       */
      aggregation_bits?: string;
      signature?: string & unknown;
      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
      data?: {
        /** @example 1 */
        slot?: string;
        /** @example 1 */
        index?: string;
        beacon_block_root?: string & unknown;
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
        source?: {
          /** @example 1 */
          epoch?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          root?: string;
        };
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
        target?: {
          /** @example 1 */
          epoch?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          root?: string;
        };
      };
    };
    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
    AttestationData: {
      /** @example 1 */
      slot?: string;
      /** @example 1 */
      index?: string;
      beacon_block_root?: string & unknown;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      source?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      target?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
    };
    /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
    Fork: {
      /**
       * @description a fork version number
       * @example 0x00000000
       */
      previous_version?: string;
      /**
       * @description a fork version number
       * @example 0x00000000
       */
      current_version?: string;
      /** @example 1 */
      epoch?: string;
    };
    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
    Checkpoint: {
      /** @example 1 */
      epoch?: string;
      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
      root?: string;
    };
    /** @example 1 */
    Uint64: string;
    NetworkIdentity: {
      /**
       * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
       * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
       */
      peer_id?: string;
      /**
       * @description Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
       * @example enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8
       */
      enr?: string;
      p2p_addresses?: (string & unknown)[];
      discovery_addresses?: (string & unknown & unknown)[];
      /** @description Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/p2p-interface.md#metadata) */
      metadata?: {
        seq_number?: unknown & string;
        attnets?: unknown & string & unknown;
        syncnets?: unknown & string & unknown & unknown;
      };
    };
    Peer: {
      /**
       * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
       * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
       */
      peer_id?: string;
      enr?: string & (unknown | null);
      last_seen_p2p_address?: string & unknown;
      /** @enum {string} */
      state?: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
      /** @enum {string} */
      direction?: 'inbound' | 'outbound';
    };
    /**
     * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
     * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
     */
    PeerId: string;
    /** @enum {string} */
    PeerConnectionState:
      | 'disconnected'
      | 'connecting'
      | 'connected'
      | 'disconnecting';
    /** @enum {string} */
    PeerConnectionDirection: 'inbound' | 'outbound';
    GenesisTime: string & unknown & unknown;
    /**
     * @description A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
     * @example Lighthouse/v0.1.5 (Linux x86_64)
     */
    Version: string;
    /**
     * @description a fork version number
     * @example 0x00000000
     */
    ForkVersion: string;
    DependentRoot: string & unknown;
    ExecutionOptimistic: boolean & unknown & unknown;
    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
    Root: string;
    Hex: string;
    /**
     * Format: hex
     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
     */
    Graffiti: string;
    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
    Signature: string;
    ErrorMessage: {
      /**
       * @description Either specific error code in case of invalid request or http status code
       * @example 404
       */
      code?: number;
      /** @description Message describing error */
      message?: string;
      /** @description Optional stacktraces, sent when node is in debug mode */
      stacktraces?: string[];
    };
    IndexedErrorMessage: {
      /**
       * @description Either specific error code in case of invalid request or http status code
       * @example 400
       */
      code?: number;
      /**
       * @description Message describing error
       * @example some failures
       */
      message?: string;
      /** @description List of individual items that have failed */
      failures?: {
        /**
         * @description Index of item in the request list that caused the error
         * @example 3
         */
        index?: number;
        /**
         * @description Message describing error
         * @example invalid signature
         */
        message?: string;
      }[];
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#signedbeaconblock) object envelope from the CL Altair spec. */
    'Altair.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock) object from the CL Altair spec. */
      message?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
        body?: {
          randao_reveal?: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data?: {
            deposit_root?: string & unknown;
            deposit_count?: string & unknown;
            block_hash?: string & unknown;
          };
          graffiti?: string;
          proposer_slashings?: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
          }[];
          attester_slashings?: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          }[];
          attestations?: {
            /**
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits?: string;
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          }[];
          deposits?: {
            /** @description Branch in the deposit tree. */
            proof?: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              withdrawal_credentials?: string & unknown;
              amount?: string & unknown;
              signature?: string & unknown;
            };
          }[];
          voluntary_exits?: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message?: {
              epoch?: string & unknown;
              validator_index?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate?: {
            /**
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits?: string;
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            sync_committee_signature?: string;
          };
        };
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock) object from the CL Altair spec. */
    'Altair.BeaconBlock': {
      slot?: string & unknown;
      proposer_index?: string & unknown;
      parent_root?: string & unknown;
      state_root?: string & unknown;
    } & {
      /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
      body?: {
        randao_reveal?: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data?: {
          deposit_root?: string & unknown;
          deposit_count?: string & unknown;
          block_hash?: string & unknown;
        };
        graffiti?: string;
        proposer_slashings?: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
        }[];
        attester_slashings?: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        }[];
        attestations?: {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        }[];
        deposits?: {
          /** @description Branch in the deposit tree. */
          proof?: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data?: {
            /**
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey?: string;
            withdrawal_credentials?: string & unknown;
            amount?: string & unknown;
            signature?: string & unknown;
          };
        }[];
        voluntary_exits?: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message?: {
            epoch?: string & unknown;
            validator_index?: string & unknown;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate?: {
          /**
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits?: string;
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          sync_committee_signature?: string;
        };
      };
    };
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconstate) object from the CL Altair spec. */
    'Altair.BeaconState': {
      /** @example 1 */
      genesis_time?: string;
      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
      genesis_validators_root?: string;
      /** @example 1 */
      slot?: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork?: {
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version?: string;
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        current_version?: string;
        /** @example 1 */
        epoch?: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        body_root?: string & unknown;
      };
      block_roots?: string[];
      state_roots?: string[];
      historical_roots?: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      };
      eth1_data_votes?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      }[];
      /** @example 1 */
      eth1_deposit_index?: string;
      validators?: {
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey?: string;
        withdrawal_credentials?: string & unknown;
        effective_balance?: string & unknown;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed?: boolean;
        activation_eligibility_epoch?: string & unknown;
        activation_epoch?: string & unknown;
        exit_epoch?: string & unknown;
        withdrawable_epoch?: string & unknown;
      }[];
      /** @description Validator balances in gwei */
      balances?: string[];
      randao_mixes?: string[];
      /** @description Per-epoch sums of slashed effective balances */
      slashings?: string[];
      previous_epoch_participation?: string[];
      current_epoch_participation?: string[];
      /**
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits?: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description Per-validator inactivity scores. New in Altair */
      inactivity_scores?: string[];
      current_sync_committee?: {
        pubkeys?: string[];
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey?: string;
      };
      next_sync_committee?: {
        pubkeys?: string[];
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey?: string;
      };
    };
    'Altair.SyncCommitteeSignature': {
      /** @example 1 */
      slot?: string;
      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
      beacon_block_root?: string;
      /** @example 1 */
      validator_index?: string;
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    'Altair.SyncCommitteeSubscription': {
      /** @example 1 */
      validator_index?: string;
      sync_committee_indices?: string[];
      until_epoch?: string & unknown;
    };
    'Altair.ContributionAndProof': {
      aggregator_index?: string & unknown;
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      selection_proof?: string;
      contribution?: {
        slot?: string & unknown;
        beacon_block_root?: string & unknown;
        subcommittee_index?: string & unknown;
        aggregation_bits?: unknown & string & unknown;
        signature?: string & unknown;
      };
    };
    'Altair.SignedContributionAndProof': {
      message?: {
        aggregator_index?: string & unknown;
        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
        selection_proof?: string;
        contribution?: {
          slot?: string & unknown;
          beacon_block_root?: string & unknown;
          subcommittee_index?: string & unknown;
          aggregation_bits?: unknown & string & unknown;
          signature?: string & unknown;
        };
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    'Altair.SyncCommitteeContribution': {
      slot?: string & unknown;
      beacon_block_root?: string & unknown;
      subcommittee_index?: string & unknown;
      aggregation_bits?: unknown & string & unknown;
      signature?: string & unknown;
    };
    'Altair.SyncCommittee': {
      validators?: string[] & unknown;
      validator_aggregates?: (string[] & unknown)[];
    };
    /**
     * @description An address on the execution (Ethereum 1) network.
     * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
     */
    ExecutionAddress: string;
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconstate) object from the Eth2.0 Bellatrix spec. */
    'Bellatrix.BeaconState': {
      /** @example 1 */
      genesis_time?: string;
      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
      genesis_validators_root?: string;
      /** @example 1 */
      slot?: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork?: {
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version?: string;
        /**
         * @description a fork version number
         * @example 0x00000000
         */
        current_version?: string;
        /** @example 1 */
        epoch?: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        body_root?: string & unknown;
      };
      block_roots?: string[];
      state_roots?: string[];
      historical_roots?: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      };
      eth1_data_votes?: {
        deposit_root?: string & unknown;
        deposit_count?: string & unknown;
        block_hash?: string & unknown;
      }[];
      /** @example 1 */
      eth1_deposit_index?: string;
      validators?: {
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey?: string;
        withdrawal_credentials?: string & unknown;
        effective_balance?: string & unknown;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed?: boolean;
        activation_eligibility_epoch?: string & unknown;
        activation_epoch?: string & unknown;
        exit_epoch?: string & unknown;
        withdrawable_epoch?: string & unknown;
      }[];
      /** @description Validator balances in gwei */
      balances?: string[];
      randao_mixes?: string[];
      /** @description Per-epoch sums of slashed effective balances */
      slashings?: string[];
      previous_epoch_participation?: string[];
      current_epoch_participation?: string[];
      /**
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits?: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint?: {
        /** @example 1 */
        epoch?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        root?: string;
      };
      /** @description Per-validator inactivity scores. New in Altair */
      inactivity_scores?: string[];
      current_sync_committee?: {
        pubkeys?: string[];
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey?: string;
      };
      next_sync_committee?: {
        pubkeys?: string[];
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey?: string;
      };
      /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
      latest_execution_payload_header?: {
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        parent_hash?: string;
        /**
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
         */
        fee_recipient?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        state_root?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        receipts_root?: string;
        /** @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 */
        logs_bloom?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        prev_randao?: string;
        /** @example 1 */
        block_number?: string;
        /** @example 1 */
        gas_limit?: string;
        /** @example 1 */
        gas_used?: string;
        /** @example 1 */
        timestamp?: string;
        /**
         * @description Extra data on the execution (Ethereum 1) network.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        extra_data?: string;
        /** @example 1 */
        base_fee_per_gas?: string;
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        block_hash?: string;
      } & {
        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
        transactions_root?: string;
      };
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
    'Bellatrix.BeaconBlock': {
      slot?: string & unknown;
      proposer_index?: string & unknown;
      parent_root?: string & unknown;
      state_root?: string & unknown;
    } & {
      body?: {
        randao_reveal?: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data?: {
          deposit_root?: string & unknown;
          deposit_count?: string & unknown;
          block_hash?: string & unknown;
        };
        graffiti?: string;
        proposer_slashings?: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
        }[];
        attester_slashings?: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        }[];
        attestations?: {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        }[];
        deposits?: {
          /** @description Branch in the deposit tree. */
          proof?: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data?: {
            /**
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey?: string;
            withdrawal_credentials?: string & unknown;
            amount?: string & unknown;
            signature?: string & unknown;
          };
        }[];
        voluntary_exits?: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message?: {
            epoch?: string & unknown;
            validator_index?: string & unknown;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate?: {
          /**
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits?: string;
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          sync_committee_signature?: string;
        };
      } & {
        execution_payload?: {
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          parent_hash?: string;
          /**
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
           */
          fee_recipient?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          state_root?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          receipts_root?: string;
          /** @example 0x
          logs_bloom?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          prev_randao?: string;
          /** @example 1 */
          block_number?: string;
          /** @example 1 */
          gas_limit?: string;
          /** @example 1 */
          gas_used?: string;
          /** @example 1 */
          timestamp?: string;
          /**
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data?: string;
          /** @example 1 */
          base_fee_per_gas?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          block_hash?: string;
        } & {
          transactions?: string[];
        };
      };
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#signedbeaconblock) object envelope from the CL Bellatrix spec. */
    'Bellatrix.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
      message?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        body?: {
          randao_reveal?: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data?: {
            deposit_root?: string & unknown;
            deposit_count?: string & unknown;
            block_hash?: string & unknown;
          };
          graffiti?: string;
          proposer_slashings?: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
          }[];
          attester_slashings?: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          }[];
          attestations?: {
            /**
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits?: string;
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          }[];
          deposits?: {
            /** @description Branch in the deposit tree. */
            proof?: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              withdrawal_credentials?: string & unknown;
              amount?: string & unknown;
              signature?: string & unknown;
            };
          }[];
          voluntary_exits?: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message?: {
              epoch?: string & unknown;
              validator_index?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate?: {
            /**
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits?: string;
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            sync_committee_signature?: string;
          };
        } & {
          execution_payload?: {
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            parent_hash?: string;
            /**
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
             */
            fee_recipient?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            state_root?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            receipts_root?: string;
            /** @example 0x
            logs_bloom?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            prev_randao?: string;
            /** @example 1 */
            block_number?: string;
            /** @example 1 */
            gas_limit?: string;
            /** @example 1 */
            gas_used?: string;
            /** @example 1 */
            timestamp?: string;
            /**
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data?: string;
            /** @example 1 */
            base_fee_per_gas?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            block_hash?: string;
          } & {
            transactions?: string[];
          };
        };
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    /** @description A variant of the the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
    'Bellatrix.BlindedBeaconBlock': {
      slot?: string & unknown;
      proposer_index?: string & unknown;
      parent_root?: string & unknown;
      state_root?: string & unknown;
    } & {
      /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
      body?: {
        randao_reveal?: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data?: {
          deposit_root?: string & unknown;
          deposit_count?: string & unknown;
          block_hash?: string & unknown;
        };
        graffiti?: string;
        proposer_slashings?: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
        }[];
        attester_slashings?: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        }[];
        attestations?: {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        }[];
        deposits?: {
          /** @description Branch in the deposit tree. */
          proof?: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data?: {
            /**
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey?: string;
            withdrawal_credentials?: string & unknown;
            amount?: string & unknown;
            signature?: string & unknown;
          };
        }[];
        voluntary_exits?: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message?: {
            epoch?: string & unknown;
            validator_index?: string & unknown;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate?: {
          /**
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits?: string;
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          sync_committee_signature?: string;
        };
      } & {
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
        execution_payload_header?: {
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          parent_hash?: string;
          /**
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
           */
          fee_recipient?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          state_root?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          receipts_root?: string;
          /** @example 0x
          logs_bloom?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          prev_randao?: string;
          /** @example 1 */
          block_number?: string;
          /** @example 1 */
          gas_limit?: string;
          /** @example 1 */
          gas_used?: string;
          /** @example 1 */
          timestamp?: string;
          /**
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data?: string;
          /** @example 1 */
          base_fee_per_gas?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          block_hash?: string;
        } & {
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          transactions_root?: string;
        };
      };
    };
    /** @description A variant of the the the [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#signedbeaconblock) object envelope from the CL Bellatrix spec, which contains a `BlindedBeaconBlock` rather than a `BeaconBlock`. */
    'Bellatrix.SignedBlindedBeaconBlock': {
      /** @description A variant of the the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
      message?: {
        slot?: string & unknown;
        proposer_index?: string & unknown;
        parent_root?: string & unknown;
        state_root?: string & unknown;
      } & {
        /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
        body?: {
          randao_reveal?: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data?: {
            deposit_root?: string & unknown;
            deposit_count?: string & unknown;
            block_hash?: string & unknown;
          };
          graffiti?: string;
          proposer_slashings?: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2?: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
          }[];
          attester_slashings?: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2?: {
              /** @description Attesting validator indices */
              attesting_indices?: string[];
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          }[];
          attestations?: {
            /**
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits?: string;
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          }[];
          deposits?: {
            /** @description Branch in the deposit tree. */
            proof?: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              withdrawal_credentials?: string & unknown;
              amount?: string & unknown;
              signature?: string & unknown;
            };
          }[];
          voluntary_exits?: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message?: {
              epoch?: string & unknown;
              validator_index?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate?: {
            /**
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits?: string;
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            sync_committee_signature?: string;
          };
        } & {
          /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
          execution_payload_header?: {
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            parent_hash?: string;
            /**
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
             */
            fee_recipient?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            state_root?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            receipts_root?: string;
            /** @example 0x
            logs_bloom?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            prev_randao?: string;
            /** @example 1 */
            block_number?: string;
            /** @example 1 */
            gas_limit?: string;
            /** @example 1 */
            gas_used?: string;
            /** @example 1 */
            timestamp?: string;
            /**
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data?: string;
            /** @example 1 */
            base_fee_per_gas?: string;
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            block_hash?: string;
          } & {
            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
            transactions_root?: string;
          };
        };
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
    /**
     * @example phase0
     * @enum {undefined}
     */
    ConsensusVersion: 'phase0' | 'altair' | 'bellatrix';
    /** @description The `SignedValidatorRegistration` object from the Builder API specification. */
    SignedValidatorRegistration: {
      /** @description The `ValidatorRegistration` object from the Builder API specification. */
      message?: {
        /**
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
         */
        fee_recipient?: string;
        /**
         * @description Preferred gas limit of validator.
         * @example 1
         */
        gas_limit?: string;
        /**
         * @description Unix timestamp of registration.
         * @example 1
         */
        timestamp?: string;
        /**
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey?: string;
      };
      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
      signature?: string;
    };
  };
  responses: {
    /** Invalid request syntax. */
    InvalidRequest: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 400
           */
          code?: number;
          /** @description Message describing error */
          message?: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Not found */
    NotFound: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code?: number;
          /** @description Message describing error */
          message?: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Beacon node internal error. */
    InternalError: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code?: number;
          /** @description Message describing error */
          message?: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Beacon node is currently syncing, try again later. */
    CurrentlySyncing: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code?: number;
          /** @description Message describing error */
          message?: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
  };
  parameters: {
    /**
     * @description State identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
     *
     * @example head
     */
    StateId: string;
    /**
     * @description Block identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
     *
     * @example head
     */
    BlockId: string;
  };
  headers: {
    /** Required in response so client can deserialize returned json or ssz data more effectively. */
    'Eth-Consensus-Version': 'phase0' | 'altair' | 'bellatrix';
  };
}

export interface operations {
  /** Retrieve details of the chain's genesis which can be used to identify chain. */
  getGenesis: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              genesis_time?: string & unknown & unknown;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              genesis_validators_root?: string;
              /**
               * @description a fork version number
               * @example 0x00000000
               */
              genesis_fork_version?: string;
            };
          };
        };
      };
      /** Chain genesis info is not yet known */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Calculates HashTreeRoot for state with given 'stateId'. If stateId is root, same value will be returned. */
  getStateRoot: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              root?: string & unknown;
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'. */
  getStateFork: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
            data?: {
              /**
               * @description a fork version number
               * @example 0x00000000
               */
              previous_version?: string;
              /**
               * @description a fork version number
               * @example 0x00000000
               */
              current_version?: string;
              /** @example 1 */
              epoch?: string;
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns finality checkpoints for state with given 'stateId'.
   * In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.
   */
  getStateFinalityCheckpoints: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              previous_justified?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              current_justified?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              finalized?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators with their balance, status and index.
   *
   * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
   * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
   * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
   * for which inputs a response has been returned.
   */
  getStateValidators: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        id?: string[];
        /** [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ) */
        status?: (
          | (
              | 'pending_initialized'
              | 'pending_queued'
              | 'active_ongoing'
              | 'active_exiting'
              | 'active_slashed'
              | 'exited_unslashed'
              | 'exited_slashed'
              | 'withdrawal_possible'
              | 'withdrawal_done'
            )
          | ('active' | 'pending' | 'exited' | 'withdrawal')
        )[];
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              index?: string & unknown;
              balance?: string & unknown;
              /**
               * @description Possible statuses:
               * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
               * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
               * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
               * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
               * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
               * - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
               * - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.
               * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
               * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
               *
               * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
               *
               * @example active_ongoing
               * @enum {undefined}
               */
              status?:
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done';
              validator?: {
                /**
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey?: string;
                withdrawal_credentials?: string & unknown;
                effective_balance?: string & unknown;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed?: boolean;
                activation_eligibility_epoch?: string & unknown;
                activation_epoch?: string & unknown;
                exit_epoch?: string & unknown;
                withdrawable_epoch?: string & unknown;
              };
            }[];
          };
        };
      };
      /** Invalid state or validator ID, or status */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Returns validator specified by state and id or public key along with status and balance. */
  getStateValidator: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        validator_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              index?: string & unknown;
              balance?: string & unknown;
              /**
               * @description Possible statuses:
               * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
               * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
               * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
               * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
               * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
               * - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
               * - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.
               * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
               * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
               *
               * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
               *
               * @example active_ongoing
               * @enum {undefined}
               */
              status?:
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done';
              validator?: {
                /**
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey?: string;
                withdrawal_credentials?: string & unknown;
                effective_balance?: string & unknown;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed?: boolean;
                activation_eligibility_epoch?: string & unknown;
                activation_epoch?: string & unknown;
                exit_epoch?: string & unknown;
                withdrawable_epoch?: string & unknown;
              };
            };
          };
        };
      };
      /** Invalid state or validator ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators balances.
   *
   * Balances will be returned for all indices or public key that match known validators.  If an index or public key does not
   * match any known validator, no balance will be returned but this will not cause an error.  There are no guarantees for the
   * returned data in terms of ordering; the index and is returned for each balance, and can be used to confirm for which inputs a
   * response has been returned.
   */
  getStateValidatorBalances: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        id?: string[];
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              index?: string & unknown;
              balance?: string & unknown;
            }[];
          };
        };
      };
      /** Invalid state or validator ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves the committees for the given state. */
  getEpochCommittees: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Fetch committees for the given epoch.  If not present then the committees for the epoch of the state will be obtained. */
        epoch?: string & unknown;
        /** Restrict returned values to those matching the supplied committee index. */
        index?: string & unknown;
        /** Restrict returned values to those matching the supplied slot. */
        slot?: string & unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              index?: string & unknown;
              /** @example 1 */
              slot?: string;
              /** @description List of validator indices assigned to this committee */
              validators?: string[];
            }[];
          };
        };
      };
      /** Invalid state ID, index, epoch, slot, or combination thereof */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves the sync committees for the given state. */
  getEpochSyncCommittees: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Fetch sync committees for the given epoch.  If not present then the sync committees for the epoch of the state will be obtained. */
        epoch?: string & unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              validators?: string[] & unknown;
              validator_aggregates?: (string[] & unknown)[];
            };
          };
        };
      };
      /** Invalid state ID or epoch */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves block headers matching given query. By default it will fetch current head slot blocks. */
  getBlockHeaders: {
    parameters: {
      query: {
        slot?: string & unknown;
        parent_root?: string & unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
              canonical?: boolean;
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              header?: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message?: {
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  body_root?: string & unknown;
                };
                /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                signature?: string;
              };
            }[];
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves block header for given block id. */
  getBlockHeader: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
              canonical?: boolean;
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              header?: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message?: {
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  body_root?: string & unknown;
                };
                /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                signature?: string;
              };
            };
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
   * to be included in the beacon chain. The beacon node is not required to validate the signed
   * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
   * successful. The beacon node is expected to integrate the new block into its state, and
   * therefore validate the block internally, however blocks which fail the validation are still
   * broadcast but a different status code is returned (202)
   */
  publishBlock: {
    parameters: {
      header: {
        /** Version of the block being submitted, if using SSZ encoding. */
        'Eth-Consensus-Version'?: 'phase0' | 'altair' | 'bellatrix';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database. */
      202: unknown;
      /** The `SignedBeaconBlock` object is invalid */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBeaconBlock` object composed of `BeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json':
          | {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            }
          | {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock) object from the CL Altair spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate?: {
                    /**
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits?: string;
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    sync_committee_signature?: string;
                  };
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            }
          | {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate?: {
                    /**
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits?: string;
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    sync_committee_signature?: string;
                  };
                } & {
                  execution_payload?: {
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    parent_hash?: string;
                    /**
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                     */
                    fee_recipient?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    state_root?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    receipts_root?: string;
                    /** @example 0x
                    logs_bloom?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    prev_randao?: string;
                    /** @example 1 */
                    block_number?: string;
                    /** @example 1 */
                    gas_limit?: string;
                    /** @example 1 */
                    gas_used?: string;
                    /** @example 1 */
                    timestamp?: string;
                    /**
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data?: string;
                    /** @example 1 */
                    base_fee_per_gas?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    block_hash?: string;
                  } & {
                    transactions?: string[];
                  };
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
   * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
   * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
   * to be included in the beacon chain. The beacon node is not required to validate the signed
   * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
   * successful. The beacon node is expected to integrate the new block into its state, and
   * therefore validate the block internally, however blocks which fail the validation are still
   * broadcast but a different status code is returned (202). Pre-Bellatrix, this endpoint will accept
   * a `SignedBeaconBlock`.
   */
  publishBlindedBlock: {
    parameters: {
      header: {
        /** Version of the block being submitted, if using SSZ encoding. */
        'Eth-Consensus-Version'?: 'phase0' | 'altair' | 'bellatrix';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database. */
      202: unknown;
      /** The `SignedBlindedBeaconBlock` object is invalid */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBlindedBeaconBlock` object composed of `BlindedBeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json':
          | {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            }
          | {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock) object from the CL Altair spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate?: {
                    /**
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits?: string;
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    sync_committee_signature?: string;
                  };
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            }
          | {
              /** @description A variant of the the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate?: {
                    /**
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits?: string;
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    sync_committee_signature?: string;
                  };
                } & {
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                  execution_payload_header?: {
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    parent_hash?: string;
                    /**
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                     */
                    fee_recipient?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    state_root?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    receipts_root?: string;
                    /** @example 0x
                    logs_bloom?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    prev_randao?: string;
                    /** @example 1 */
                    block_number?: string;
                    /** @example 1 */
                    gas_limit?: string;
                    /** @example 1 */
                    gas_used?: string;
                    /** @example 1 */
                    timestamp?: string;
                    /**
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data?: string;
                    /** @example 1 */
                    base_fee_per_gas?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    block_hash?: string;
                  } & {
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    transactions_root?: string;
                  };
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Returns the complete `SignedBeaconBlock` for a given block ID.
   * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
   */
  getBlock: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL spec. */
            data?: {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
              message?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body?: {
                  randao_reveal?: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  graffiti?: string;
                  proposer_slashings?: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2?: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message?: {
                        slot?: string & unknown;
                        proposer_index?: string & unknown;
                        parent_root?: string & unknown;
                        state_root?: string & unknown;
                      } & {
                        body_root?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    };
                  }[];
                  attester_slashings?: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2?: {
                      /** @description Attesting validator indices */
                      attesting_indices?: string[];
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    };
                  }[];
                  attestations?: {
                    /**
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits?: string;
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  }[];
                  deposits?: {
                    /** @description Branch in the deposit tree. */
                    proof?: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data?: {
                      /**
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey?: string;
                      withdrawal_credentials?: string & unknown;
                      amount?: string & unknown;
                      signature?: string & unknown;
                    };
                  }[];
                  voluntary_exits?: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message?: {
                      epoch?: string & unknown;
                      validator_index?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  }[];
                };
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            };
          };
          'application/octet-stream': unknown;
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Retrieves block details for given block id.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getBlockV2: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        headers: {
          /** Required in response so client can deserialize returned json or ssz data more effectively. */
          'Eth-Consensus-Version': 'phase0' | 'altair' | 'bellatrix';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version?: 'phase0' | 'altair' | 'bellatrix';
            execution_optimistic?: boolean & unknown & unknown;
            data?:
              | {
                  /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
                  message?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                    body?: {
                      randao_reveal?: string & unknown;
                      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                      eth1_data?: {
                        deposit_root?: string & unknown;
                        deposit_count?: string & unknown;
                        block_hash?: string & unknown;
                      };
                      graffiti?: string;
                      proposer_slashings?: {
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_1?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_2?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                      }[];
                      attester_slashings?: {
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_1?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_2?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                      }[];
                      attestations?: {
                        /**
                         * @description Attester aggregation bits.
                         * @example 0x01
                         */
                        aggregation_bits?: string;
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      }[];
                      deposits?: {
                        /** @description Branch in the deposit tree. */
                        proof?: string[];
                        /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                        data?: {
                          /**
                           * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                           * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                           */
                          pubkey?: string;
                          withdrawal_credentials?: string & unknown;
                          amount?: string & unknown;
                          signature?: string & unknown;
                        };
                      }[];
                      voluntary_exits?: {
                        /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                        message?: {
                          epoch?: string & unknown;
                          validator_index?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      }[];
                    };
                  };
                  /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                  signature?: string;
                }
              | {
                  /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock) object from the CL Altair spec. */
                  message?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                    body?: {
                      randao_reveal?: string & unknown;
                      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                      eth1_data?: {
                        deposit_root?: string & unknown;
                        deposit_count?: string & unknown;
                        block_hash?: string & unknown;
                      };
                      graffiti?: string;
                      proposer_slashings?: {
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_1?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_2?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                      }[];
                      attester_slashings?: {
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_1?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_2?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                      }[];
                      attestations?: {
                        /**
                         * @description Attester aggregation bits.
                         * @example 0x01
                         */
                        aggregation_bits?: string;
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      }[];
                      deposits?: {
                        /** @description Branch in the deposit tree. */
                        proof?: string[];
                        /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                        data?: {
                          /**
                           * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                           * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                           */
                          pubkey?: string;
                          withdrawal_credentials?: string & unknown;
                          amount?: string & unknown;
                          signature?: string & unknown;
                        };
                      }[];
                      voluntary_exits?: {
                        /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                        message?: {
                          epoch?: string & unknown;
                          validator_index?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      }[];
                      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                      sync_aggregate?: {
                        /**
                         * @description Aggregation bits of sync
                         * @example 0x01
                         */
                        sync_committee_bits?: string;
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        sync_committee_signature?: string;
                      };
                    };
                  };
                  /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                  signature?: string;
                }
              | {
                  /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
                  message?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    body?: {
                      randao_reveal?: string & unknown;
                      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                      eth1_data?: {
                        deposit_root?: string & unknown;
                        deposit_count?: string & unknown;
                        block_hash?: string & unknown;
                      };
                      graffiti?: string;
                      proposer_slashings?: {
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_1?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                        /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                        signed_header_2?: {
                          /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                          message?: {
                            slot?: string & unknown;
                            proposer_index?: string & unknown;
                            parent_root?: string & unknown;
                            state_root?: string & unknown;
                          } & {
                            body_root?: string & unknown;
                          };
                          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                          signature?: string;
                        };
                      }[];
                      attester_slashings?: {
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_1?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                        /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                        attestation_2?: {
                          /** @description Attesting validator indices */
                          attesting_indices?: string[];
                          signature?: string & unknown;
                          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                          data?: {
                            /** @example 1 */
                            slot?: string;
                            /** @example 1 */
                            index?: string;
                            beacon_block_root?: string & unknown;
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            source?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                            target?: {
                              /** @example 1 */
                              epoch?: string;
                              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                              root?: string;
                            };
                          };
                        };
                      }[];
                      attestations?: {
                        /**
                         * @description Attester aggregation bits.
                         * @example 0x01
                         */
                        aggregation_bits?: string;
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      }[];
                      deposits?: {
                        /** @description Branch in the deposit tree. */
                        proof?: string[];
                        /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                        data?: {
                          /**
                           * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                           * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                           */
                          pubkey?: string;
                          withdrawal_credentials?: string & unknown;
                          amount?: string & unknown;
                          signature?: string & unknown;
                        };
                      }[];
                      voluntary_exits?: {
                        /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                        message?: {
                          epoch?: string & unknown;
                          validator_index?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      }[];
                      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                      sync_aggregate?: {
                        /**
                         * @description Aggregation bits of sync
                         * @example 0x01
                         */
                        sync_committee_bits?: string;
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        sync_committee_signature?: string;
                      };
                    } & {
                      execution_payload?: {
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        parent_hash?: string;
                        /**
                         * @description An address on the execution (Ethereum 1) network.
                         * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                         */
                        fee_recipient?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        state_root?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        receipts_root?: string;
                        /** @example 0x
                        logs_bloom?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        prev_randao?: string;
                        /** @example 1 */
                        block_number?: string;
                        /** @example 1 */
                        gas_limit?: string;
                        /** @example 1 */
                        gas_used?: string;
                        /** @example 1 */
                        timestamp?: string;
                        /**
                         * @description Extra data on the execution (Ethereum 1) network.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        extra_data?: string;
                        /** @example 1 */
                        base_fee_per_gas?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        block_hash?: string;
                      } & {
                        transactions?: string[];
                      };
                    };
                  };
                  /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                  signature?: string;
                };
          };
          'application/octet-stream': unknown;
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader */
  getBlockRoot: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              root?: unknown & string;
            };
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves attestation included in requested block. */
  getBlockAttestations: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /**
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits?: string;
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            }[];
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves attestations known by the node but not necessarily incorporated into any block */
  getPoolAttestations: {
    parameters: {
      query: {
        slot?: string;
        committee_index?: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits?: string;
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            }[];
          };
        };
      };
      /** The slot or committee index could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Submits Attestation objects to the node.  Each attestation in the request body is processed individually.
   *
   * If an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.
   *
   * If one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.
   */
  submitPoolAttestations: {
    responses: {
      /** Attestations are stored in pool and broadcast on appropriate subnet */
      200: unknown;
      /** Errors with one or more attestations */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message?: string;
            /** @description List of individual items that have failed */
            failures?: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index?: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message?: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits?: string;
          signature?: string & unknown;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data?: {
            /** @example 1 */
            slot?: string;
            /** @example 1 */
            index?: string;
            beacon_block_root?: string & unknown;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            source?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
            target?: {
              /** @example 1 */
              epoch?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
            };
          };
        }[];
      };
    };
  };
  /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
  getPoolAttesterSlashings: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_1?: {
                /** @description Attesting validator indices */
                attesting_indices?: string[];
                signature?: string & unknown;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data?: {
                  /** @example 1 */
                  slot?: string;
                  /** @example 1 */
                  index?: string;
                  beacon_block_root?: string & unknown;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  source?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  target?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                };
              };
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_2?: {
                /** @description Attesting validator indices */
                attesting_indices?: string[];
                signature?: string & unknown;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data?: {
                  /** @example 1 */
                  slot?: string;
                  /** @example 1 */
                  index?: string;
                  beacon_block_root?: string & unknown;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  source?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  target?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                };
              };
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network. */
  submitPoolAttesterSlashings: {
    responses: {
      /** Success */
      200: unknown;
      /** Invalid attester slashing */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2?: {
            /** @description Attesting validator indices */
            attesting_indices?: string[];
            signature?: string & unknown;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Retrieves proposer slashings known by the node but not necessarily incorporated into any block */
  getPoolProposerSlashings: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_1?: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message?: {
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  body_root?: string & unknown;
                };
                /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                signature?: string;
              };
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_2?: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message?: {
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  body_root?: string & unknown;
                };
                /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                signature?: string;
              };
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network. */
  submitPoolProposerSlashings: {
    responses: {
      /** Success */
      200: unknown;
      /** Invalid proposer slashing */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2?: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              body_root?: string & unknown;
            };
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            signature?: string;
          };
        };
      };
    };
  };
  /**
   * Submits sync committee signature objects to the node.
   *
   * Sync committee signatures are not present in phase0, but are required for Altair networks.
   *
   * If a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.
   *
   * If one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.
   */
  submitPoolSyncCommitteeSignatures: {
    responses: {
      /** Sync committee signatures are stored in pool and broadcast on appropriate subnet */
      200: unknown;
      /** Errors with one or more sync committee signatures */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message?: string;
            /** @description List of individual items that have failed */
            failures?: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index?: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message?: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          slot?: string;
          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
          beacon_block_root?: string;
          /** @example 1 */
          validator_index?: string;
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
      };
    };
  };
  /** Retrieves voluntary exits known by the node but not necessarily incorporated into any block */
  getPoolVoluntaryExits: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
              message?: {
                epoch?: string & unknown;
                validator_index?: string & unknown;
              };
              /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
              signature?: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network. */
  submitPoolVoluntaryExit: {
    responses: {
      /** Voluntary exit is stored in node and broadcasted to network */
      200: unknown;
      /** Invalid voluntary exit */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message?: {
            epoch?: string & unknown;
            validator_index?: string & unknown;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        };
      };
    };
  };
  /**
   * Returns full BeaconState object for given stateId.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getState: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
            data?: {
              /** @example 1 */
              genesis_time?: string;
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              genesis_validators_root?: string;
              /** @example 1 */
              slot?: string;
              /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
              fork?: {
                /**
                 * @description a fork version number
                 * @example 0x00000000
                 */
                previous_version?: string;
                /**
                 * @description a fork version number
                 * @example 0x00000000
                 */
                current_version?: string;
                /** @example 1 */
                epoch?: string;
              };
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              latest_block_header?: {
                slot?: string & unknown;
                proposer_index?: string & unknown;
                parent_root?: string & unknown;
                state_root?: string & unknown;
              } & {
                body_root?: string & unknown;
              };
              block_roots?: string[];
              state_roots?: string[];
              historical_roots?: string[];
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data?: {
                deposit_root?: string & unknown;
                deposit_count?: string & unknown;
                block_hash?: string & unknown;
              };
              eth1_data_votes?: {
                deposit_root?: string & unknown;
                deposit_count?: string & unknown;
                block_hash?: string & unknown;
              }[];
              /** @example 1 */
              eth1_deposit_index?: string;
              validators?: {
                /**
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey?: string;
                withdrawal_credentials?: string & unknown;
                effective_balance?: string & unknown;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed?: boolean;
                activation_eligibility_epoch?: string & unknown;
                activation_epoch?: string & unknown;
                exit_epoch?: string & unknown;
                withdrawable_epoch?: string & unknown;
              }[];
              /** @description Validator balances in gwei */
              balances?: string[];
              randao_mixes?: string[];
              /** @description Per-epoch sums of slashed effective balances */
              slashings?: string[];
              previous_epoch_attestations?: {
                /** @description Attester aggregation bits. */
                aggregation_bits?: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data?: {
                  /** @example 1 */
                  slot?: string;
                  /** @example 1 */
                  index?: string;
                  beacon_block_root?: string & unknown;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  source?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  target?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                };
                /** @example 1 */
                inclusion_delay?: string;
                /** @example 1 */
                proposer_index?: string;
              }[];
              current_epoch_attestations?: {
                /** @description Attester aggregation bits. */
                aggregation_bits?: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data?: {
                  /** @example 1 */
                  slot?: string;
                  /** @example 1 */
                  index?: string;
                  beacon_block_root?: string & unknown;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  source?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  target?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                };
                /** @example 1 */
                inclusion_delay?: string;
                /** @example 1 */
                proposer_index?: string;
              }[];
              /**
               * @description Bit set for every recent justified epoch
               * @example 0x01
               */
              justification_bits?: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              previous_justified_checkpoint?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              current_justified_checkpoint?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              finalized_checkpoint?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns full BeaconState object for given stateId.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getStateV2: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {
          /** Required in response so client can deserialize returned json or ssz data more effectively. */
          'Eth-Consensus-Version': 'phase0' | 'altair' | 'bellatrix';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version?: 'phase0' | 'altair' | 'bellatrix';
            execution_optimistic?: boolean & unknown & unknown;
            data?:
              | {
                  /** @example 1 */
                  genesis_time?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  genesis_validators_root?: string;
                  /** @example 1 */
                  slot?: string;
                  /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                  fork?: {
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    previous_version?: string;
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    current_version?: string;
                    /** @example 1 */
                    epoch?: string;
                  };
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  latest_block_header?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    body_root?: string & unknown;
                  };
                  block_roots?: string[];
                  state_roots?: string[];
                  historical_roots?: string[];
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  eth1_data_votes?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  }[];
                  /** @example 1 */
                  eth1_deposit_index?: string;
                  validators?: {
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey?: string;
                    withdrawal_credentials?: string & unknown;
                    effective_balance?: string & unknown;
                    /**
                     * @description Was validator slashed (not longer active).
                     * @example false
                     */
                    slashed?: boolean;
                    activation_eligibility_epoch?: string & unknown;
                    activation_epoch?: string & unknown;
                    exit_epoch?: string & unknown;
                    withdrawable_epoch?: string & unknown;
                  }[];
                  /** @description Validator balances in gwei */
                  balances?: string[];
                  randao_mixes?: string[];
                  /** @description Per-epoch sums of slashed effective balances */
                  slashings?: string[];
                  previous_epoch_attestations?: {
                    /** @description Attester aggregation bits. */
                    aggregation_bits?: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                    /** @example 1 */
                    inclusion_delay?: string;
                    /** @example 1 */
                    proposer_index?: string;
                  }[];
                  current_epoch_attestations?: {
                    /** @description Attester aggregation bits. */
                    aggregation_bits?: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                    /** @example 1 */
                    inclusion_delay?: string;
                    /** @example 1 */
                    proposer_index?: string;
                  }[];
                  /**
                   * @description Bit set for every recent justified epoch
                   * @example 0x01
                   */
                  justification_bits?: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  previous_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  current_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  finalized_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                }
              | {
                  /** @example 1 */
                  genesis_time?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  genesis_validators_root?: string;
                  /** @example 1 */
                  slot?: string;
                  /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                  fork?: {
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    previous_version?: string;
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    current_version?: string;
                    /** @example 1 */
                    epoch?: string;
                  };
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  latest_block_header?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    body_root?: string & unknown;
                  };
                  block_roots?: string[];
                  state_roots?: string[];
                  historical_roots?: string[];
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  eth1_data_votes?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  }[];
                  /** @example 1 */
                  eth1_deposit_index?: string;
                  validators?: {
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey?: string;
                    withdrawal_credentials?: string & unknown;
                    effective_balance?: string & unknown;
                    /**
                     * @description Was validator slashed (not longer active).
                     * @example false
                     */
                    slashed?: boolean;
                    activation_eligibility_epoch?: string & unknown;
                    activation_epoch?: string & unknown;
                    exit_epoch?: string & unknown;
                    withdrawable_epoch?: string & unknown;
                  }[];
                  /** @description Validator balances in gwei */
                  balances?: string[];
                  randao_mixes?: string[];
                  /** @description Per-epoch sums of slashed effective balances */
                  slashings?: string[];
                  previous_epoch_participation?: string[];
                  current_epoch_participation?: string[];
                  /**
                   * @description Bit set for every recent justified epoch
                   * @example 0x01
                   */
                  justification_bits?: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  previous_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  current_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  finalized_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description Per-validator inactivity scores. New in Altair */
                  inactivity_scores?: string[];
                  current_sync_committee?: {
                    pubkeys?: string[];
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    aggregate_pubkey?: string;
                  };
                  next_sync_committee?: {
                    pubkeys?: string[];
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    aggregate_pubkey?: string;
                  };
                }
              | {
                  /** @example 1 */
                  genesis_time?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  genesis_validators_root?: string;
                  /** @example 1 */
                  slot?: string;
                  /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                  fork?: {
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    previous_version?: string;
                    /**
                     * @description a fork version number
                     * @example 0x00000000
                     */
                    current_version?: string;
                    /** @example 1 */
                    epoch?: string;
                  };
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  latest_block_header?: {
                    slot?: string & unknown;
                    proposer_index?: string & unknown;
                    parent_root?: string & unknown;
                    state_root?: string & unknown;
                  } & {
                    body_root?: string & unknown;
                  };
                  block_roots?: string[];
                  state_roots?: string[];
                  historical_roots?: string[];
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  };
                  eth1_data_votes?: {
                    deposit_root?: string & unknown;
                    deposit_count?: string & unknown;
                    block_hash?: string & unknown;
                  }[];
                  /** @example 1 */
                  eth1_deposit_index?: string;
                  validators?: {
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey?: string;
                    withdrawal_credentials?: string & unknown;
                    effective_balance?: string & unknown;
                    /**
                     * @description Was validator slashed (not longer active).
                     * @example false
                     */
                    slashed?: boolean;
                    activation_eligibility_epoch?: string & unknown;
                    activation_epoch?: string & unknown;
                    exit_epoch?: string & unknown;
                    withdrawable_epoch?: string & unknown;
                  }[];
                  /** @description Validator balances in gwei */
                  balances?: string[];
                  randao_mixes?: string[];
                  /** @description Per-epoch sums of slashed effective balances */
                  slashings?: string[];
                  previous_epoch_participation?: string[];
                  current_epoch_participation?: string[];
                  /**
                   * @description Bit set for every recent justified epoch
                   * @example 0x01
                   */
                  justification_bits?: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  previous_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  current_justified_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                  finalized_checkpoint?: {
                    /** @example 1 */
                    epoch?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    root?: string;
                  };
                  /** @description Per-validator inactivity scores. New in Altair */
                  inactivity_scores?: string[];
                  current_sync_committee?: {
                    pubkeys?: string[];
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    aggregate_pubkey?: string;
                  };
                  next_sync_committee?: {
                    pubkeys?: string[];
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    aggregate_pubkey?: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                  latest_execution_payload_header?: {
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    parent_hash?: string;
                    /**
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                     */
                    fee_recipient?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    state_root?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    receipts_root?: string;
                    /** @example 0x
                    logs_bloom?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    prev_randao?: string;
                    /** @example 1 */
                    block_number?: string;
                    /** @example 1 */
                    gas_limit?: string;
                    /** @example 1 */
                    gas_used?: string;
                    /** @example 1 */
                    timestamp?: string;
                    /**
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data?: string;
                    /** @example 1 */
                    base_fee_per_gas?: string;
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    block_hash?: string;
                  } & {
                    /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                    transactions_root?: string;
                  };
                };
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves all possible chain heads (leaves of fork choice tree). */
  getDebugChainHeads: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
              /** @example 1 */
              slot?: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves all possible chain heads (leaves of fork choice tree). */
  getDebugChainHeadsV2: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
              root?: string;
              /** @example 1 */
              slot?: string;
              execution_optimistic?: boolean & unknown & unknown;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the node's network presence */
  getNetworkIdentity: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id?: string;
              /**
               * @description Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
               * @example enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8
               */
              enr?: string;
              p2p_addresses?: (string & unknown)[];
              discovery_addresses?: (string & unknown & unknown)[];
              /** @description Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/p2p-interface.md#metadata) */
              metadata?: {
                seq_number?: unknown & string;
                attnets?: unknown & string & unknown;
                syncnets?: unknown & string & unknown & unknown;
              };
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions */
  getPeers: {
    parameters: {
      query: {
        state?: (
          | 'disconnected'
          | 'connecting'
          | 'connected'
          | 'disconnecting'
        )[];
        direction?: ('inbound' | 'outbound')[];
      };
    };
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id?: string;
              enr?: string & (unknown | null);
              last_seen_p2p_address?: string & unknown;
              /** @enum {string} */
              state?:
                | 'disconnected'
                | 'connecting'
                | 'connected'
                | 'disconnecting';
              /** @enum {string} */
              direction?: 'inbound' | 'outbound';
            }[];
            meta?: {
              /**
               * @description Total number of items
               * @example 1
               */
              count?: number;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the given peer */
  getPeer: {
    parameters: {
      path: {
        peer_id: string;
      };
    };
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id?: string;
              enr?: string & (unknown | null);
              last_seen_p2p_address?: string & unknown;
              /** @enum {string} */
              state?:
                | 'disconnected'
                | 'connecting'
                | 'connected'
                | 'disconnecting';
              /** @enum {string} */
              direction?: 'inbound' | 'outbound';
            };
          };
        };
      };
      /** The peer ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Peer not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves number of known peers. */
  getPeerCount: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              disconnected?: string & unknown;
              connecting?: string & unknown;
              connected?: string & unknown;
              disconnecting?: string & unknown;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field. */
  getNodeVersion: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
               * @example Lighthouse/v0.1.5 (Linux x86_64)
               */
              version?: string;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to. */
  getSyncingStatus: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data?: {
              head_slot?: unknown & string;
              sync_distance?: unknown & string;
              is_syncing?: boolean & unknown;
              is_optimistic?: boolean & unknown;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Returns node health status in http status codes. Useful for load balancers. */
  getHealth: {
    responses: {
      /** Node is ready */
      200: unknown;
      /** Node is syncing but can serve incomplete data */
      206: unknown;
      /** Node not initialized or having issues */
      503: unknown;
    };
  };
  /** Retrieve all forks, past present and future, of which this node is aware. */
  getForkSchedule: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description a fork version number
               * @example 0x00000000
               */
              previous_version?: string;
              /**
               * @description a fork version number
               * @example 0x00000000
               */
              current_version?: string;
              /** @example 1 */
              epoch?: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Retrieve specification configuration used on this node.  The configuration should include:
   *   - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/beacon-chain.md#constants) values
   *   - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/altair.yaml) values
   *   - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml) values
   *
   * Values are returned with following format:
   *   - any value starting with 0x in the spec is returned as a hex string
   *   - numeric values are returned as a quoted integer
   */
  getSpec: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description Key value mapping of all constants, presets and configuration values for all known hard forks
             * Values are returned with following format:
             *   - any value starting with 0x in the spec is returned as a hex string
             *   - numeric values are returned as a quoted integer
             */
            data?: { [key: string]: unknown };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieve Eth1 deposit contract address and chain ID. */
  getDepositContract: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data?: {
              chain_id?: string & unknown & unknown;
              address?: string & unknown & unknown;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.
   * Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
   * - event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
   * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`
   * - event.block otherwise
   *
   * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.
   */
  getAttesterDuties: {
    parameters: {
      path: {
        /** Should only be allowed 1 epoch ahead */
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            dependent_root?: string & unknown;
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              validator_index?: string & unknown;
              committee_index?: string & unknown;
              committee_length?: string & unknown;
              committees_at_slot?: string & unknown;
              validator_committee_index?: string & unknown;
              slot?: string & unknown;
            }[];
          };
        };
      };
      /** Invalid epoch or index */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of the validator indices for which to obtain the duties. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.
   * Duties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
   * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
   * - event.block otherwise
   *
   * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.
   */
  getProposerDuties: {
    parameters: {
      path: {
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            dependent_root?: string & unknown;
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              validator_index?: string & unknown;
              slot?: string & unknown;
            }[];
          };
        };
      };
      /** Invalid epoch */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests the beacon node to provide a set of sync committee duties for a particular epoch. */
  getSyncCommitteeDuties: {
    parameters: {
      path: {
        /** epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1 */
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            execution_optimistic?: boolean & unknown & unknown;
            data?: {
              /**
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey?: string;
              validator_index?: string & unknown;
              /** @description The indices of the validator in the sync committee. */
              validator_sync_committee_indices?: string[];
            }[];
          };
        };
      };
      /** Invalid epoch or index */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of the validator indices for which to obtain the duties. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid block, which can then be signed by a validator.
   *
   * __NOTE__: Supports only phase0 blocks.
   */
  produceBlock: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
            data?: {
              slot?: string & unknown;
              proposer_index?: string & unknown;
              parent_root?: string & unknown;
              state_root?: string & unknown;
            } & {
              /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
              body?: {
                randao_reveal?: string & unknown;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data?: {
                  deposit_root?: string & unknown;
                  deposit_count?: string & unknown;
                  block_hash?: string & unknown;
                };
                graffiti?: string;
                proposer_slashings?: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1?: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message?: {
                      slot?: string & unknown;
                      proposer_index?: string & unknown;
                      parent_root?: string & unknown;
                      state_root?: string & unknown;
                    } & {
                      body_root?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2?: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message?: {
                      slot?: string & unknown;
                      proposer_index?: string & unknown;
                      parent_root?: string & unknown;
                      state_root?: string & unknown;
                    } & {
                      body_root?: string & unknown;
                    };
                    /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                    signature?: string;
                  };
                }[];
                attester_slashings?: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1?: {
                    /** @description Attesting validator indices */
                    attesting_indices?: string[];
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2?: {
                    /** @description Attesting validator indices */
                    attesting_indices?: string[];
                    signature?: string & unknown;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data?: {
                      /** @example 1 */
                      slot?: string;
                      /** @example 1 */
                      index?: string;
                      beacon_block_root?: string & unknown;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      source?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                      target?: {
                        /** @example 1 */
                        epoch?: string;
                        /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                        root?: string;
                      };
                    };
                  };
                }[];
                attestations?: {
                  /**
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits?: string;
                  signature?: string & unknown;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data?: {
                    /** @example 1 */
                    slot?: string;
                    /** @example 1 */
                    index?: string;
                    beacon_block_root?: string & unknown;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                    source?: {
                      /** @example 1 */
                      epoch?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      root?: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                    target?: {
                      /** @example 1 */
                      epoch?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      root?: string;
                    };
                  };
                }[];
                deposits?: {
                  /** @description Branch in the deposit tree. */
                  proof?: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data?: {
                    /**
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey?: string;
                    withdrawal_credentials?: string & unknown;
                    amount?: string & unknown;
                    signature?: string & unknown;
                  };
                }[];
                voluntary_exits?: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message?: {
                    epoch?: string & unknown;
                    validator_index?: string & unknown;
                  };
                  /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                  signature?: string;
                }[];
              };
            };
          };
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid block, which can then be signed by a validator.
   *
   * Metadata in the response indicates the type of block produced, and the supported types of block
   * will be added to as forks progress.
   */
  produceBlockV2: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        headers: {
          /** Required in response so client can deserialize returned json or ssz data more effectively. */
          'Eth-Consensus-Version': 'phase0' | 'altair' | 'bellatrix';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version?: 'phase0' | 'altair' | 'bellatrix';
            data?:
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                  };
                })
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate?: {
                      /**
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits?: string;
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      sync_committee_signature?: string;
                    };
                  };
                })
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate?: {
                      /**
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits?: string;
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      sync_committee_signature?: string;
                    };
                  } & {
                    execution_payload?: {
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      parent_hash?: string;
                      /**
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                       */
                      fee_recipient?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      state_root?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      receipts_root?: string;
                      /** @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 */
                      logs_bloom?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      prev_randao?: string;
                      /** @example 1 */
                      block_number?: string;
                      /** @example 1 */
                      gas_limit?: string;
                      /** @example 1 */
                      gas_used?: string;
                      /** @example 1 */
                      timestamp?: string;
                      /**
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data?: string;
                      /** @example 1 */
                      base_fee_per_gas?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      block_hash?: string;
                    } & {
                      transactions?: string[];
                    };
                  };
                });
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid blinded block, which can then be signed by a validator.
   * A blinded block is a block with only a transactions root, rather than a full transactions list.
   *
   * Metadata in the response indicates the type of block produced, and the supported types of block
   * will be added to as forks progress.
   *
   * Pre-Bellatrix, this endpoint will return a `BeaconBlock`.
   */
  produceBlindedBlock: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /**
             * @example bellatrix
             * @enum {string}
             */
            version?: 'phase0' | 'altair' | 'bellatrix';
            data?:
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                  };
                })
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate?: {
                      /**
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits?: string;
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      sync_committee_signature?: string;
                    };
                  };
                })
              | ({
                  slot?: string & unknown;
                  proposer_index?: string & unknown;
                  parent_root?: string & unknown;
                  state_root?: string & unknown;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
                  body?: {
                    randao_reveal?: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data?: {
                      deposit_root?: string & unknown;
                      deposit_count?: string & unknown;
                      block_hash?: string & unknown;
                    };
                    graffiti?: string;
                    proposer_slashings?: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2?: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message?: {
                          slot?: string & unknown;
                          proposer_index?: string & unknown;
                          parent_root?: string & unknown;
                          state_root?: string & unknown;
                        } & {
                          body_root?: string & unknown;
                        };
                        /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                        signature?: string;
                      };
                    }[];
                    attester_slashings?: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2?: {
                        /** @description Attesting validator indices */
                        attesting_indices?: string[];
                        signature?: string & unknown;
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data?: {
                          /** @example 1 */
                          slot?: string;
                          /** @example 1 */
                          index?: string;
                          beacon_block_root?: string & unknown;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          source?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                          target?: {
                            /** @example 1 */
                            epoch?: string;
                            /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                            root?: string;
                          };
                        };
                      };
                    }[];
                    attestations?: {
                      /**
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits?: string;
                      signature?: string & unknown;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data?: {
                        /** @example 1 */
                        slot?: string;
                        /** @example 1 */
                        index?: string;
                        beacon_block_root?: string & unknown;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        source?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                        target?: {
                          /** @example 1 */
                          epoch?: string;
                          /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                          root?: string;
                        };
                      };
                    }[];
                    deposits?: {
                      /** @description Branch in the deposit tree. */
                      proof?: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data?: {
                        /**
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey?: string;
                        withdrawal_credentials?: string & unknown;
                        amount?: string & unknown;
                        signature?: string & unknown;
                      };
                    }[];
                    voluntary_exits?: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message?: {
                        epoch?: string & unknown;
                        validator_index?: string & unknown;
                      };
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      signature?: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate?: {
                      /**
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits?: string;
                      /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
                      sync_committee_signature?: string;
                    };
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                    execution_payload_header?: {
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      parent_hash?: string;
                      /**
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
                       */
                      fee_recipient?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      state_root?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      receipts_root?: string;
                      /** @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 */
                      logs_bloom?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      prev_randao?: string;
                      /** @example 1 */
                      block_number?: string;
                      /** @example 1 */
                      gas_limit?: string;
                      /** @example 1 */
                      gas_used?: string;
                      /** @example 1 */
                      timestamp?: string;
                      /**
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data?: string;
                      /** @example 1 */
                      base_fee_per_gas?: string;
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      block_hash?: string;
                    } & {
                      /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                      transactions_root?: string;
                    };
                  };
                });
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests that the beacon node produce an AttestationData. */
  produceAttestationData: {
    parameters: {
      query: {
        /** The slot for which an attestation data should be created. */
        slot: string;
        /** The committee index for which an attestation data should be created. */
        committee_index: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data?: {
              /** @example 1 */
              slot?: string;
              /** @example 1 */
              index?: string;
              beacon_block_root?: string & unknown;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              source?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
              target?: {
                /** @example 1 */
                epoch?: string;
                /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                root?: string;
              };
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Aggregates all attestations matching given attestation data root and slot */
  getAggregatedAttestation: {
    parameters: {
      query: {
        /** HashTreeRoot of AttestationData that validator wants aggregated */
        attestation_data_root: string;
        slot: string;
      };
    };
    responses: {
      /** Returns aggregated `Attestation` object with same `AttestationData` root. */
      200: {
        content: {
          'application/json': {
            /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
            data?: {
              /**
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits?: string;
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
  publishAggregateAndProofs: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          message?: {
            /** @example 1 */
            aggregator_index?: string;
            /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
            aggregate?: {
              /**
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits?: string;
              signature?: string & unknown;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data?: {
                /** @example 1 */
                slot?: string;
                /** @example 1 */
                index?: string;
                beacon_block_root?: string & unknown;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                source?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint */
                target?: {
                  /** @example 1 */
                  epoch?: string;
                  /** @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 */
                  root?: string;
                };
              };
            };
          } & {
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            selection_proof?: string;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
      };
    };
  };
  /**
   * After beacon node receives this request,
   * search using discv5 for peers related to this subnet
   * and replace current peers with those ones if necessary
   * If validator `is_aggregator`, beacon node must:
   * - announce subnet topic subscription on gossipsub
   * - aggregate attestations received on that subnet
   */
  prepareBeaconCommitteeSubnet: {
    responses: {
      /**
       * Slot signature is valid and beacon node has prepared the attestation subnet.
       *
       * Note that we cannot be certain the Beacon node will find peers for that subnet for various reasons.
       */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index?: string;
          /** @example 1 */
          committee_index?: string;
          committees_at_slot?: string & unknown;
          slot?: string & unknown;
          /** @description Signals to BN that a validator on the VC has been chosen for aggregator role. */
          is_aggregator?: boolean;
        }[];
      };
    };
  };
  /**
   * Subscribe to a number of sync committee subnets
   *
   * Sync committees are not present in phase0, but are required for Altair networks.
   *
   * Subscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.
   */
  prepareSyncCommitteeSubnets: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index?: string;
          sync_committee_indices?: string[];
          until_epoch?: string & unknown;
        }[];
      };
    };
  };
  /** Requests that the beacon node produce a sync committee contribution. */
  produceSyncCommitteeContribution: {
    parameters: {
      query: {
        /** The slot for which a sync committee contribution should be created. */
        slot: string;
        /** the subcommittee index for which to produce the contribution. */
        subcommittee_index: string;
        /** the block root for which to produce the contribution. */
        beacon_block_root: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            data?: {
              slot?: string & unknown;
              beacon_block_root?: string & unknown;
              subcommittee_index?: string & unknown;
              aggregation_bits?: unknown & string & unknown;
              signature?: string & unknown;
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Publish multiple signed sync committee contribution and proofs */
  publishContributionAndProofs: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          message?: {
            aggregator_index?: string & unknown;
            /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
            selection_proof?: string;
            contribution?: {
              slot?: string & unknown;
              beacon_block_root?: string & unknown;
              subcommittee_index?: string & unknown;
              aggregation_bits?: unknown & string & unknown;
              signature?: string & unknown;
            };
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
      };
    };
  };
  /**
   * Prepares the beacon node for potential proposers by supplying information
   * required when proposing blocks for the given validators.  The information
   * supplied for each validator index will persist through the epoch in which
   * the call is submitted and for a further two epochs after that, or until the
   * beacon node restarts.  It is expected that validator clients will send this
   * information periodically, for example each epoch, to ensure beacon nodes have
   * correct and timely fee recipient information.
   *
   * Note that there is no guarantee that the beacon node will use the supplied fee
   * recipient when creating a block proposal, so on receipt of a proposed block the
   * validator should confirm that it finds the fee recipient within the block
   * acceptable before signing it.
   *
   * Also note that requests containing currently inactive or unknown validator
   * indices will be accepted, as they may become active at a later epoch.
   */
  prepareBeaconProposer: {
    responses: {
      /** Preparation information has been received. */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index?: string;
          /**
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
           */
          fee_recipient?: string;
        }[];
      };
    };
  };
  /**
   * Prepares the beacon node for engaging with external builders. The
   * information will be sent by the beacon node to the builder network. It is
   * expected that the validator client will send this information periodically
   * to ensure the beacon node has correct and timely registration information
   * to provide to builders. The validator client should not sign blinded beacon
   * blocks that do not adhere to their latest fee recipient and gas limit
   * preferences.
   *
   * Note that requests containing currently inactive or unknown validator
   * pubkeys will be accepted, as they may become active at a later epoch.
   */
  registerValidator: {
    responses: {
      /** Registration information has been received. */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The `ValidatorRegistration` object from the Builder API specification. */
          message?: {
            /**
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xabcf8e0d4e9587369b2301d0790347320302cc09
             */
            fee_recipient?: string;
            /**
             * @description Preferred gas limit of validator.
             * @example 1
             */
            gas_limit?: string;
            /**
             * @description Unix timestamp of registration.
             * @example 1
             */
            timestamp?: string;
            /**
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey?: string;
          };
          /** @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505 */
          signature?: string;
        }[];
      };
    };
  };
  /**
   * Provides endpoint to subscribe to beacon node Server-Sent-Events stream.
   * Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)
   * implementation to listen on those events.
   *
   * Servers _may_ send SSE comments beginning with `:` for any purpose, including to keep the
   * event stream connection alive in the presence of proxy servers.
   */
  eventstream: {
    parameters: {
      query: {
        /** Event types to subscribe to */
        topics: (
          | 'head'
          | 'block'
          | 'attestation'
          | 'voluntary_exit'
          | 'finalized_checkpoint'
          | 'chain_reorg'
          | 'contribution_and_proof'
        )[];
      };
    };
    responses: {
      /** Opened SSE stream. */
      200: {
        content: {
          'text/event-stream': string;
        };
      };
      /** The topics supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          } & unknown;
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code?: number;
            /** @description Message describing error */
            message?: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
}

export interface external {}
